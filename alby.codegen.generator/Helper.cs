using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using System.Xml;
using System.Xml.XPath;
using System.Data;
using System.Data.Sql;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Reflection;
using System.Threading ;

namespace alby.codegen.generator
{
	public partial class Helper
	{
		//--------------------------------------------------------------------------------------------------------------------		

		// 1 hour timeout
		public	const int SQL_TIMEOUT = 60 * 60 * 1 ; 

		// verbose output
		public  static bool	__verbose = false ;

		//--------------------------------------------------------------------------------------------------------------------		

		public void Message( string format, params object[] parameters )
		{
			Console.WriteLine( "[{0}] {1}", 
								Thread.CurrentThread.ManagedThreadId, 
								string.Format( format, parameters ) ) ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public void MessageVerbose( string format, params object[] parameters )
		{
			if ( __verbose )
				this.Message( format, parameters ) ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public void WriteCodeGenHeader(StreamWriter sw) 
		{
			string str = "";
			sw.WriteLine(str);

			str = "// This file was automatically generated by the code gen tool - do not modify." ;
			sw.WriteLine(str);
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public void WriteCodeGenHeader2(StreamWriter sw)
		{
			string str = "";
			sw.WriteLine(str);

			str = "// This file was automatically generated by the code gen tool, but your are free to modify it.";
			sw.WriteLine(str);

			str = "// The code gen tool will not overwrite this file.";
			sw.WriteLine(str);
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public void WriteTabs(StreamWriter sw, int tabs)
		{
			for (int i = 1; i <= tabs; i++)
				sw.Write("\t");
		}

		//--------------------------------------------------------------------------------------------------------------------		
		
		public void Write( StreamWriter sw, int tabs, string text )
		{
			if (text.Length > 0)
			{
				WriteTabs( sw, tabs ) ;
				sw.WriteLine(text);
			}
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public void WriteUsing( StreamWriter sw ) 
		{
			WriteUsing( sw, null ) ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public void WriteUsing( StreamWriter sw, string ns ) 
		{
			string str = "" ;
			sw.WriteLine(str);
			
			str = "using System ;" ;
			sw.WriteLine(str);

			str = "using scg = System.Collections.Generic ;";
			sw.WriteLine(str);

			str = "using sd = System.Data ;";
			sw.WriteLine(str);

			str = "using sds = System.Data.SqlClient ;";
			sw.WriteLine(str);

			str = "using sr = System.Reflection ;";
			sw.WriteLine(str);

			str = "using mst = Microsoft.SqlServer.Types ;";
			sw.WriteLine(str);

			str = "using mss = Microsoft.SqlServer.Server ;";
			sw.WriteLine(str);

			str = "using acr = alby.codegen.runtime ;";
			sw.WriteLine(str);

			if ( ns != null )
			{
				str = "using ns = " + ns + ";" ;
				sw.WriteLine(str) ;
			}

			sw.WriteLine();		
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public void WriteUsingUnitTest( StreamWriter sw, string tablensPrefix, string tablens ) 
		{
			this.WriteUsing( sw ) ;

			string str = "using nu = NUnit.Framework;";
			sw.WriteLine(str);

			sw.WriteLine( "using " + tablensPrefix + " = " + tablens + " ;" );
			sw.WriteLine();		
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public bool IsBadCSharpName( string col ) 
		{
			if ( col.Equals( "operator" )) return true ; 
			if ( col.Equals( "override" )) return true ; 
			if ( col.Equals( "checked" )) return true ; 

			return false ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public bool IsSchemaPrefixed( List<string> prefixSchemaList, string schema ) 
		{
			if ( prefixSchemaList == null ) return false ;

			return prefixSchemaList.Contains( schema.ToUpper() ) ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public string IdentifierSeparator
		{
			get
			{
				return "٠" ; // U+0660 // arabic indic digit 0
			}
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public string SchemaAndTableSeparator
		{
			get
			{
				return "٠" ; // U+0660 // arabic indic digit 0
			}
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public string GetSchemaAndTableName( List<string> prefixSchemaList, string sqlSchemaName, string sqlTableName )
		{
			if ( IsSchemaPrefixed( prefixSchemaList, sqlSchemaName ) )
				return sqlSchemaName + this.SchemaAndTableSeparator + sqlTableName ;

			return sqlTableName ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		/// <summary>
		/// this regex is compliant with item 2.4.2 of the C# specification
		/// unicode character classes Lm and Cf dont compile though (spec says they should!)
		/// </summary>
		protected const string CsharpValidIdentifierRegex = @"\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Nl}\p{Mn}\p{Mc}\p{Pc}" ;

		protected void UnicodeIdentifierTest_ẻẽếℚℛℜᾈᾉᾊᄐᄑᄒⅠⅡⅢⅴⅵⅶɑ̀ɒ́ɑ̂ािी०१२︳︴﹍﹎﹏_() 
		{
			// yep it's true - these are all valid characters, from the unicode characters classes above, for a C# identifier
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public string GetCsharpClassName( List<string> prefixSchemaList, string sqlSchemaName, string sqlTableName )
		{
			string str = GetSchemaAndTableName( prefixSchemaList, sqlSchemaName, sqlTableName ) ;

			// replace dud characters with underscore
			str = Regex.Replace( str, 
								 @"[^" 
									+ CsharpValidIdentifierRegex 
									+ this.SchemaAndTableSeparator 
									+ this.IdentifierSeparator 
									+ @"_ˡ]" , 
								 @"_" ) ;

			// first character must be a letter or underscore
			char firstChar = char.Parse( str.Substring( 0, 1 ) ) ;

			if ( char.IsLetter( firstChar ) || firstChar == '_' ) // ok
			{}
			else
				str = "_" + str ;

			// check for bad csharp tokens - append underscore
			if ( this.IsBadCSharpName( str ) )
				str += "_";

			return str;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public string GetCsharpColumnName( string sqlColumnName, string csharpclassname ) 
		{
			string str = GetCsharpClassName( null, null, sqlColumnName ) ;

			if ( str.Equals( csharpclassname ) )
				str += "_";

			return str ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public string GetCsharpColumnType( Type sqlColumnType )
		{
			return this.GetCsharpColumnType( sqlColumnType.ToString() ) ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public string GetCsharpColumnType( string str )
		{
			if (str == "System.Boolean")		return "bool?";
			if (str == "System.Byte")			return "byte?";
			if (str == "System.Decimal")		return "decimal?";
			if (str == "System.Double")			return "double?";
			if (str == "System.Single")			return "float?";
			if (str == "System.Int32")			return "int?";
			if (str == "System.Int64")			return "long?";
			if (str == "System.Int16")			return "short?";
			if (str == "System.String" )		return "string" ;
			if (str == "System.Guid")			return "Guid?";
			if (str == "System.DateTime")		return "DateTime?";
			if (str == "System.DateTimeOffset") return "DateTimeOffset?";
			if (str == "System.Byte[]")			return "byte[]";
			if (str == "System.TimeSpan")		return "TimeSpan?";
			if (str == "System.Object")			return "object";
			
			if (str == "Microsoft.SqlServer.Types.SqlGeography")	return "mst.SqlGeography";
			if (str == "Microsoft.SqlServer.Types.SqlGeometry")		return "mst.SqlGeometry";
			if (str == "Microsoft.SqlServer.Types.SqlHierarchyId")	return "mst.SqlHierarchyId?";
			
			throw new ApplicationException(string.Format("[{0}] unknown type to map to C# data type.", str));
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public SqlDbType GetSqlServerColumnType( Type sqlColumnType )
		{
			return this.GetSqlServerColumnType( sqlColumnType.ToString() ) ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public SqlDbType GetSqlServerColumnType( string str )
		{
			if (str == "System.Boolean")		return SqlDbType.Bit ;
			if (str == "System.Byte")			return SqlDbType.TinyInt ;
			if (str == "System.Decimal")		return SqlDbType.Decimal ;
			if (str == "System.Double")			return SqlDbType.Float ;
			if (str == "System.Single")			return SqlDbType.Real ;
			if (str == "System.Int32")			return SqlDbType.Int ;
			if (str == "System.Int64")			return SqlDbType.BigInt ;
			if (str == "System.Int16")			return SqlDbType.SmallInt ;
			if (str == "System.String" )		return SqlDbType.NText ;
			if (str == "System.Guid")			return SqlDbType.UniqueIdentifier ;
			if (str == "System.DateTime")		return SqlDbType.DateTime ;
			if (str == "System.DateTimeOffset")	return SqlDbType.DateTimeOffset ;
			if (str == "System.Byte[]")			return SqlDbType.Image;
			if (str == "System.TimeSpan")		return SqlDbType.Time ;
			
			throw new ApplicationException( string.Format( "[{0}] unknown type to map to sql server data type.", str ) ) ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public string GetSqlServerUdtColumnType( Type sqlColumnType )
		{
			return this.GetSqlServerUdtColumnType( sqlColumnType.ToString() ) ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public string GetSqlServerUdtColumnType( string str )
		{
			if (str == "Microsoft.SqlServer.Types.SqlGeometry" )	return "geometry" ;
			if (str == "Microsoft.SqlServer.Types.SqlGeography")	return "geography";
			if (str == "Microsoft.SqlServer.Types.SqlHierarchyId")	return "hierarchyid";

			throw new ApplicationException( string.Format( "[{0}] unknown type to map to sql server udt data type.", str ) ) ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public string GetUdtParameterTypeFromCsharpType( string csharpType )
		{
			if ( csharpType == "mst.SqlGeometry")		return "geometry";
			if ( csharpType == "mst.SqlGeography")		return "geography";
			if ( csharpType == "mst.SqlHierarchyId?")	return "hierarchyid";

			return "" ; // not a udt type
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public string GetCsharpColumnTypeForStoredProcedure( string sqlServerDataType )
		{
			string str = sqlServerDataType.ToLower() ;

			if (str == "bigint")			return "long?"				; 
			if (str == "binary")			return "byte[]"				;
			if (str == "bit")				return "bool?"				;
			if (str == "char")				return "string"				;
			if (str == "cursor")			return "object"				; 
			if (str == "date")				return "DateTime?"			;
			if (str == "datetime")			return "DateTime?"			;
			if (str == "datetime2")			return "DateTime?"			;
			if (str == "datetimeoffset")	return "DateTimeOffset?"	;
			if (str == "decimal")			return "decimal?"			;
			if (str == "float")				return "double?"			;
			if (str == "geography")			return "mst.SqlGeography"	;
			if (str == "geometry")			return "mst.SqlGeometry"	;
			if (str == "hierarchyid")		return "mst.SqlHierarchyId?";
			if (str == "image")				return "byte[]"				;
			if (str == "int")				return "int?"				;
			if (str == "money")				return "decimal?"			;
			if (str == "nchar")				return "string"				;
			if (str == "ntext")				return "string"				;
			if (str == "numeric")			return "decimal?"			;
			if (str == "nvarchar")			return "string"				;
			if (str == "real")				return "float?"				;
			if (str == "rowversion")		return "byte[]"				;
			if (str == "smalldatetime")		return "DateTime?"			;
			if (str == "smallint")			return "short?"				;
			if (str == "smallmoney")		return "decimal?"			;
			if (str == "sql_variant")		return "object"				;
			if (str == "table")				return "object"				; 
			if (str == "text")				return "string"				;
			if (str == "time")				return "TimeSpan?"			;
			if (str == "timestamp")			return "byte[]"				;
			if (str == "tinyint")			return "byte?"				;
			if (str == "uniqueidentifier")	return "Guid?"				;
			if (str == "varbinary")			return "byte[]"				;
			if (str == "varchar")			return "string"				;
			if (str == "xml")				return "string"				;

			throw new ApplicationException( string.Format( "Sql server [{0}] unknown type to map to C# data type.", str ) ) ;
		}

		//------------------------------------------------------------------------------------------------------------------

		public SqlDbType GetSqlDbTypeForStoredProcedure( string sqlServerDataType )
		{
			string str = sqlServerDataType.ToLower() ;

			if (str == "bigint")			return SqlDbType.BigInt				; 
			if (str == "binary")			return SqlDbType.Binary				;
			if (str == "bit")				return SqlDbType.Bit				;
			if (str == "char")				return SqlDbType.Char				;	
			if (str == "cursor")			return SqlDbType.Variant			; 
			if (str == "date")				return SqlDbType.Date				;
			if (str == "datetime")			return SqlDbType.DateTime			;
			if (str == "datetime2")			return SqlDbType.DateTime2			;
			if (str == "datetimeoffset")	return SqlDbType.DateTimeOffset		;
			if (str == "decimal")			return SqlDbType.Decimal			;
			if (str == "float")				return SqlDbType.Float				;
			//if (str == "geography")		
			//if (str == "geometry")		
			//if (str == "hierarchyid")		
			if (str == "image")				return SqlDbType.Image				;
			if (str == "int")				return SqlDbType.Int				;
			if (str == "money")				return SqlDbType.Money				;
			if (str == "nchar")				return SqlDbType.NChar				;
			if (str == "ntext")				return SqlDbType.NText				;
			if (str == "numeric")			return SqlDbType.Decimal			;
			if (str == "nvarchar")			return SqlDbType.NVarChar			;
			if (str == "real")				return SqlDbType.Real				;
			if (str == "rowversion")		return SqlDbType.Timestamp			;		
			if (str == "smalldatetime")		return SqlDbType.SmallDateTime		;
			if (str == "smallint")			return SqlDbType.SmallInt			;
			if (str == "smallmoney")		return SqlDbType.SmallMoney			;
			if (str == "sql_variant")		return SqlDbType.Variant			;
			if (str == "table")				return SqlDbType.Structured			; 
			if (str == "text")				return SqlDbType.Text				;
			if (str == "time")				return SqlDbType.Time				;
			if (str == "timestamp")			return SqlDbType.Timestamp			;
			if (str == "tinyint")			return SqlDbType.TinyInt			;
			if (str == "uniqueidentifier")	return SqlDbType.UniqueIdentifier	;
			if (str == "varbinary")			return SqlDbType.VarBinary			;
			if (str == "varchar")			return SqlDbType.VarChar			;
			if (str == "xml")				return SqlDbType.Xml				;

			throw new ApplicationException( string.Format( "Sql server [{0}] unknown type to map to SqlDbType data type.", str ) ) ;
		}

		//------------------------------------------------------------------------------------------------------------------

		public string GetStoredProcedureTableTypeSetType( string sqlServerDataType )
		{
			string str = sqlServerDataType.ToLower() ;

			if (str == "bigint")			return "SetInt64"           ; 
			if (str == "binary")			return "SetBytes"           ;				
			if (str == "bit")				return "SetBoolean"         ;
			if (str == "char")				return "SetString"          ;	
			if (str == "cursor")			return "SetObject"          ; 
			if (str == "date")				return "SetDateTime"        ;
			if (str == "datetime")			return "SetDateTime"        ;
			if (str == "datetime2")			return "SetDateTime"        ;
			if (str == "datetimeoffset")	return "SetDateTimeOffset"  ;
			if (str == "decimal")			return "SetDecimal"         ;
			if (str == "float")				return "SetDouble"          ;
			//if (str == "geometry")			
			//if (str == "geography")		
			//if (str == "hierarchyid")		
			if (str == "image")				return "SetBytes"           ;
			if (str == "int")				return "SetInt32"           ;
			if (str == "money")				return "SetDecimal"         ;
			if (str == "nchar")				return "SetString"          ;
			if (str == "ntext")				return "SetString"          ;
			if (str == "numeric")			return "SetDecimal"         ;
			if (str == "nvarchar")			return "SetString"          ;
			if (str == "real")				return "SetFloat"           ;
			if (str == "rowversion")		return "SetBytes"           ;		
			if (str == "smalldatetime")		return "SetDateTime"        ;
			if (str == "smallint")			return "SetInt16"           ;
			if (str == "smallmoney")		return "SetDecimal"         ;
			if (str == "sql_variant")		return "SetValue"           ;
			if (str == "table")				return "SetValue"           ;
			if (str == "text")				return "SetString"          ;
			if (str == "time")				return "SetValue"           ;
			if (str == "timestamp")			return "SetBytes"           ;
			if (str == "tinyint")			return "SetByte"            ;
			if (str == "uniqueidentifier")	return "SetGuid"            ;
			if (str == "varbinary")			return "SetBytes"           ;
			if (str == "varchar")			return "SetString"          ;
			if (str == "xml")				return "SetString"          ;

			return "SetValue" ;
			//throw new ApplicationException( string.Format( "Sql server [{0}] unknown type to map to table type set.", str ) ) ;
		}

		//------------------------------------------------------------------------------------------------------------------

		public string GetSqlDbTypeForStoredProcedureUdt( string sqlServerDataType )
		{
			string str = sqlServerDataType.ToLower() ;

			if ( str == "geometry")			return "geometry";
			if ( str == "geography")		return "geography";
			if ( str == "hierarchyid")		return "hierarchyid";

			return "" ; // not a udt type
		}

		//------------------------------------------------------------------------------------------------------------------

		public string GetSqlDbTypeForStoredProcedureUdtTableType( string sqlServerDataType )
		{
			string str = sqlServerDataType.ToLower() ;

			if (str == "geometry")			return "mst.SqlGeometry"    ; 
			if (str == "geography")			return "mst.SqlGeography"   ;
			if (str == "hierarchyid")		return "mst.SqlHierarchyId" ;

			return "" ; // not a udt type
		}

		//------------------------------------------------------------------------------------------------------------------

		public Tuple<string,string> SplitSchemaFromTable( string fqtable ) 
		{
			int dotpos = fqtable.IndexOf( '.' ) ;
			
			string schema = fqtable.Substring( 0, dotpos ) ;
			string table  = fqtable.Substring( dotpos + 1 ) ;

			return new Tuple<string,string>( schema, table ) ;
		}

		//--------------------------------------------------------------------------------------------------------------------		

		public bool IgnoreCodegenFile( string file )
		{
			string text = "" ;
			
			if ( File.Exists( file ) )
				text = File.ReadAllText( file ).ToUpper() ;
				
			return text.Contains( "DO NOT CODEGEN" ) ;
		}

		//--------------------------------------------------------------------------------------------------------------------		
				
	}
}
